drop table IF EXISTS events;
drop table IF EXISTS grades;
drop table IF EXISTS reviews;
drop table IF EXISTS films_directors;
drop table IF EXISTS films_genres;
drop table IF EXISTS friendship;
drop table IF EXISTS films_likes;
drop table IF EXISTS directors;
drop table IF EXISTS users;
drop table IF EXISTS films;
drop table IF EXISTS genres;
drop table IF EXISTS ratings;

create TABLE IF NOT EXISTS ratings
(
    rating_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name      varchar(10) NOT NULL,
    CONSTRAINT uc_rating_name UNIQUE (name)
);

create TABLE IF NOT EXISTS genres
(
    genre_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar(30) NOT NULL,
    CONSTRAINT uc_genre_name UNIQUE (name)
);

create TABLE IF NOT EXISTS films
(
    film_id      bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         varchar(50)  NOT NULL,
    description  varchar(200) NOT NULL,
    release_date date         NOT NULL,
    duration     integer      NOT NULL,
    rating_id    bigint       NOT NULL,
    CONSTRAINT fk_film_rating_id FOREIGN KEY (rating_id) REFERENCES ratings (rating_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS users
(
    user_id  bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    varchar(50) NOT NULL,
    login    varchar(50) NOT NULL,
    name     varchar(50) NOT NULL,
    birthday date        NOT NULL,
    CONSTRAINT uc_user_email UNIQUE (email),
    CONSTRAINT uc_user_login UNIQUE (login)
);

create TABLE IF NOT EXISTS films_likes
(
    film_id bigint NOT NULL,
    user_id bigint NOT NULL,
    CONSTRAINT pk_films_likes PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_films_likes_film_id FOREIGN KEY (film_id) REFERENCES films (film_id) ON delete CASCADE,
    CONSTRAINT fk_films_likes_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS friendship
(
    user_id1     bigint  NOT NULL,
    user_id2     bigint  NOT NULL,
    is_confirmed boolean NOT NULL,
    CONSTRAINT pk_friendship PRIMARY KEY (user_id1, user_id2),
    CONSTRAINT fk_friendship_user_id1 FOREIGN KEY (user_id1) REFERENCES users (user_id) ON delete CASCADE,
    CONSTRAINT fk_friendship_user_id2 FOREIGN KEY (user_id2) REFERENCES users (user_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS films_genres
(
    film_id  bigint NOT NULL,
    genre_id bigint NOT NULL,
    CONSTRAINT pk_films_genres PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_films_genres_film_id FOREIGN KEY (film_id) REFERENCES films (film_id) ON delete CASCADE,
    CONSTRAINT fk_films_genres_genre_id FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS directors
(
    director_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(50),
    CONSTRAINT uc_name UNIQUE (name)
);

create TABLE IF NOT EXISTS films_directors
(
    film_id     int REFERENCES films (film_id),
    director_id int REFERENCES directors (director_id) ON delete CASCADE,
    CONSTRAINT films_directors_pk PRIMARY KEY (film_id, director_id)
);

create TABLE IF NOT EXISTS reviews
(
    REVIEW_ID   bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id     bigint       NOT NULL,
    user_id     bigint       NOT NULL,
    description varchar(500) NOT NULL,
    is_positive boolean      NOT NULL,
    CONSTRAINT fk_reviews_film_id FOREIGN KEY (film_id) REFERENCES films (film_id) ON delete CASCADE,
    CONSTRAINT fk_reviews_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON delete CASCADE,
    CONSTRAINT uc_film_id_user_id UNIQUE (film_id, user_id)
);

create TABLE IF NOT EXISTS grades
(
    REVIEW_ID   bigint  NOT NULL,
    user_id     bigint  NOT NULL,
    is_positive boolean NOT NULL,
    CONSTRAINT fk_grades_REVIEW_ID FOREIGN KEY (REVIEW_ID) REFERENCES reviews (REVIEW_ID) ON delete CASCADE,
    CONSTRAINT fk_grades_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON delete CASCADE
);

create TABLE IF NOT EXISTS events
(
    event_id        bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_timestamp bigint                              NOT NULL,
    user_id         bigint                              NOT NULL,
    event_type      ENUM ('LIKE', 'REVIEW', 'FRIEND')   NOT NULL,
    operation       ENUM ('REMOVE', 'ADD', 'UPDATE')    NOT NULL,
    entity_id       bigint                              NOT NULL,
    CONSTRAINT fk_events_user_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON delete CASCADE
);

